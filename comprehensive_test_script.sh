#!/bin/bash

# üß™ SCRIPT DE PRUEBAS COMPLETAS - PREDICTOR DE F√öTBOL PREMIUM
# ============================================================
# Ejecuta todas las pruebas para verificar que la aplicaci√≥n funciona correctamente

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Contadores
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Funci√≥n para mostrar t√≠tulo de secci√≥n
show_section() {
    echo ""
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${BLUE}  $1${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
}

# Funci√≥n para mostrar test
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="$3"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "$(printf "%-50s" "$test_name")"
    
    # Ejecutar comando y capturar resultado
    result=$(eval "$test_command" 2>/dev/null)
    exit_code=$?
    
    if [ $exit_code -eq 0 ] && [[ "$result" == *"$expected_result"* ]]; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        return 0
    else
        echo -e "${RED}‚ùå FAIL${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        if [ ! -z "$result" ]; then
            echo -e "   ${YELLOW}Resultado: $result${NC}"
        fi
        return 1
    fi
}

# Funci√≥n para test HTTP
test_http() {
    local test_name="$1"
    local url="$2"
    local method="${3:-GET}"
    local data="${4:-}"
    local expected="${5:-200}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "$(printf "%-50s" "$test_name")"
    
    if [ "$method" = "POST" ]; then
        http_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
                    -H "Content-Type: application/json" \
                    -d "$data" \
                    "$url" \
                    --max-time 10)
    else
        http_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" --max-time 10)
    fi
    
    if [ "$http_code" = "$expected" ]; then
        echo -e "${GREEN}‚úÖ PASS (HTTP $http_code)${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        return 0
    else
        echo -e "${RED}‚ùå FAIL (HTTP $http_code)${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        return 1
    fi
}

# Funci√≥n para test de archivo
test_file() {
    local test_name="$1"
    local file_path="$2"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "$(printf "%-50s" "$test_name")"
    
    if [ -f "$file_path" ]; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        return 0
    else
        echo -e "${RED}‚ùå FAIL (archivo no encontrado)${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        return 1
    fi
}

# Funci√≥n para test de directorio
test_directory() {
    local test_name="$1"
    local dir_path="$2"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "$(printf "%-50s" "$test_name")"
    
    if [ -d "$dir_path" ]; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        return 0
    else
        echo -e "${RED}‚ùå FAIL (directorio no encontrado)${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        return 1
    fi
}

# Funci√≥n para test de comando
test_command() {
    local test_name="$1"
    local command="$2"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "$(printf "%-50s" "$test_name")"
    
    if command -v "$command" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        return 0
    else
        echo -e "${RED}‚ùå FAIL (comando no encontrado)${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        return 1
    fi
}

# Banner inicial
clear
echo -e "${PURPLE}"
echo "  ‚öΩ PREDICTOR DE F√öTBOL PREMIUM - SUITE DE PRUEBAS üß™"
echo "  =================================================="
echo ""
echo "  üéØ Verificando que toda la aplicaci√≥n funciona correctamente"
echo "  üìä Ejecutando tests de funcionalidad, rendimiento y UX"
echo "  ü§ñ Validando integraci√≥n de IA y datos"
echo -e "${NC}"

# SECCI√ìN 1: VERIFICACI√ìN DEL SISTEMA
show_section "üîß 1. VERIFICACI√ìN DEL SISTEMA"

test_command "Node.js instalado" "node"
test_command "npm disponible" "npm"
test_command "Python instalado" "python"
test_command "pip disponible" "pip"

# Verificar versiones
echo -e "\n${CYAN}üìã Informaci√≥n del sistema:${NC}"
echo "   Node.js: $(node --version 2>/dev/null || echo 'No instalado')"
echo "   npm: $(npm --version 2>/dev/null || echo 'No instalado')"
echo "   Python: $(python --version 2>/dev/null || echo 'No instalado')"
echo "   pip: $(pip --version 2>/dev/null | cut -d' ' -f2 || echo 'No instalado')"

# SECCI√ìN 2: ESTRUCTURA DE ARCHIVOS
show_section "üìÅ 2. ESTRUCTURA DE ARCHIVOS"

test_directory "Directorio backend" "backend"
test_directory "Directorio frontend" "frontend"
test_directory "Directorio python_service" "python_service"

test_file "Backend app.js" "backend/app.js"
test_file "Frontend index.html" "frontend/index.html"
test_file "Python app.py" "python_service/app.py"

test_file "Package.json backend" "backend/package.json"
test_file "Requirements.txt python" "python_service/requirements.txt"

# SECCI√ìN 3: DEPENDENCIAS
show_section "üì¶ 3. DEPENDENCIAS Y M√ìDULOS"

echo -e "${CYAN}Verificando dependencias de Node.js...${NC}"
if [ -f "backend/package.json" ]; then
    cd backend 2>/dev/null
    test_command "express instalado" "npm list express --depth=0"
    test_command "cors instalado" "npm list cors --depth=0"
    test_command "axios instalado" "npm list axios --depth=0"
    cd .. 2>/dev/null
fi

echo -e "\n${CYAN}Verificando dependencias de Python...${NC}"
if [ -d "python_service" ]; then
    test_command "Flask disponible" "python -c \"import flask\""
    test_command "Pandas disponible" "python -c \"import pandas\""
    test_command "Scikit-learn disponible" "python -c \"import sklearn\""
    test_command "NumPy disponible" "python -c \"import numpy\""
fi

# SECCI√ìN 4: SERVICIOS EN EJECUCI√ìN
show_section "üîå 4. SERVICIOS EN EJECUCI√ìN"

echo -e "${CYAN}Verificando servicios activos...${NC}"

# Verificar si los puertos est√°n en uso
if lsof -i :3000 >/dev/null 2>&1; then
    test_http "Backend Node.js (puerto 3000)" "http://localhost:3000"
else
    echo -e "$(printf "%-50s" "Backend Node.js (puerto 3000)")${YELLOW}‚ö†Ô∏è  NO INICIADO${NC}"
    echo -e "   ${YELLOW}Ejecuta: ./iniciar.bat o npm start en backend/${NC}"
fi

if lsof -i :5000 >/dev/null 2>&1; then
    test_http "Servicio Python (puerto 5000)" "http://localhost:5000"
else
    echo -e "$(printf "%-50s" "Servicio Python (puerto 5000)")${YELLOW}‚ö†Ô∏è  NO INICIADO${NC}"
    echo -e "   ${YELLOW}Ejecuta: python app.py en python_service/${NC}"
fi

# SECCI√ìN 5: APIS Y ENDPOINTS
show_section "üîå 5. PRUEBAS DE API"

# Solo si los servicios est√°n corriendo
if lsof -i :3000 >/dev/null 2>&1; then
    test_http "Health check backend" "http://localhost:3000/api/health"
    test_http "P√°gina principal" "http://localhost:3000/"
    
    # Test de predicci√≥n
    prediction_data='{"homeTeam":"Real Madrid","awayTeam":"Barcelona","league":"La Liga"}'
    test_http "API de predicci√≥n" "http://localhost:3000/api/predict" "POST" "$prediction_data"
fi

if lsof -i :5000 >/dev/null 2>&1; then
    test_http "Health check Python" "http://localhost:5000/api/health"
    
    # Test de predicci√≥n Python
    python_prediction_data='{"homeTeam":"Manchester City","awayTeam":"Liverpool","league":"Premier League"}'
    test_http "API Python predicci√≥n" "http://localhost:5000/api/predict" "POST" "$python_prediction_data"
fi

# SECCI√ìN 6: FUNCIONALIDAD WEB
show_section "üåê 6. FUNCIONALIDAD WEB"

if lsof -i :3000 >/dev/null 2>&1; then
    echo -e "${CYAN}Probando contenido de la p√°gina web...${NC}"
    
    # Verificar que la p√°gina contiene elementos clave
    page_content=$(curl -s http://localhost:3000 2>/dev/null)
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [[ "$page_content" == *"Predictor de F√∫tbol"* ]]; then
        echo -e "$(printf "%-50s" "T√≠tulo de la aplicaci√≥n")${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "$(printf "%-50s" "T√≠tulo de la aplicaci√≥n")${RED}‚ùå FAIL${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [[ "$page_content" == *"bootstrap"* ]]; then
        echo -e "$(printf "%-50s" "Bootstrap CSS cargado")${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "$(printf "%-50s" "Bootstrap CSS cargado")${RED}‚ùå FAIL${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [[ "$page_content" == *"form"* ]]; then
        echo -e "$(printf "%-50s" "Formulario de predicci√≥n")${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "$(printf "%-50s" "Formulario de predicci√≥n")${RED}‚ùå FAIL${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Servicio web no est√° corriendo. Inicia con ./iniciar.bat${NC}"
fi

# SECCI√ìN 7: MODELO DE MACHINE LEARNING
show_section "ü§ñ 7. MODELO DE MACHINE LEARNING"

if [ -f "python_service/models/saved/football_predictor.joblib" ]; then
    echo -e "$(printf "%-50s" "Modelo ML entrenado")${GREEN}‚úÖ PASS${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "$(printf "%-50s" "Modelo ML entrenado")${YELLOW}‚ö†Ô∏è  NO ENCONTRADO${NC}"
    echo -e "   ${YELLOW}Ejecuta: python train_simple.py en python_service/${NC}"
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

# Verificar datos de entrenamiento
if [ -f "python_service/data/partidos_historicos.csv" ]; then
    echo -e "$(printf "%-50s" "Datos de entrenamiento")${GREEN}‚úÖ PASS${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
    
    # Contar filas de datos
    lines=$(wc -l < "python_service/data/partidos_historicos.csv" 2>/dev/null || echo "0")
    echo -e "   ${CYAN}Partidos en dataset: $((lines - 1))${NC}"
else
    echo -e "$(printf "%-50s" "Datos de entrenamiento")${RED}‚ùå FAIL${NC}"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

# SECCI√ìN 8: PRUEBAS DE INTEGRACI√ìN
show_section "üîó 8. PRUEBAS DE INTEGRACI√ìN"

if lsof -i :3000 >/dev/null 2>&1 && lsof -i :5000 >/dev/null 2>&1; then
    echo -e "${CYAN}Probando integraci√≥n Node.js ‚Üî Python...${NC}"
    
    # Test de estado del servicio Python desde Node.js
    python_status=$(curl -s http://localhost:3000/api/python/status 2>/dev/null)
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [[ "$python_status" == *"status"* ]]; then
        echo -e "$(printf "%-50s" "Comunicaci√≥n Node.js ‚Üí Python")${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "$(printf "%-50s" "Comunicaci√≥n Node.js ‚Üí Python")${RED}‚ùå FAIL${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
    
    # Test de predicci√≥n avanzada
    advanced_pred='{"homeTeam":"Bayern Munich","awayTeam":"Dortmund","league":"Bundesliga"}'
    adv_response=$(curl -s -X POST http://localhost:3000/api/predict/advanced \
                   -H "Content-Type: application/json" \
                   -d "$advanced_pred" 2>/dev/null)
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [[ "$adv_response" == *"success"* ]]; then
        echo -e "$(printf "%-50s" "Predicci√≥n avanzada (IA)")${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "$(printf "%-50s" "Predicci√≥n avanzada (IA)")${YELLOW}‚ö†Ô∏è  FALLBACK${NC}"
        echo -e "   ${YELLOW}Usando modelo simple como respaldo${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Ambos servicios deben estar corriendo para pruebas de integraci√≥n${NC}"
fi

# SECCI√ìN 9: PRUEBAS DE RENDIMIENTO
show_section "‚ö° 9. PRUEBAS DE RENDIMIENTO"

if lsof -i :3000 >/dev/null 2>&1; then
    echo -e "${CYAN}Midiendo tiempos de respuesta...${NC}"
    
    # Test de velocidad del health check
    start_time=$(date +%s%3N)
    curl -s http://localhost:3000/api/health >/dev/null 2>&1
    end_time=$(date +%s%3N)
    response_time=$((end_time - start_time))
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [ $response_time -lt 500 ]; then
        echo -e "$(printf "%-50s" "Tiempo de respuesta API (<500ms)")${GREEN}‚úÖ PASS (${response_time}ms)${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "$(printf "%-50s" "Tiempo de respuesta API (<500ms)")${YELLOW}‚ö†Ô∏è  SLOW (${response_time}ms)${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    fi
    
    # Test de velocidad de predicci√≥n
    start_time=$(date +%s%3N)
    pred_data='{"homeTeam":"Liverpool","awayTeam":"Chelsea","league":"Premier League"}'
    curl -s -X POST http://localhost:3000/api/predict \
         -H "Content-Type: application/json" \
         -d "$pred_data" >/dev/null 2>&1
    end_time=$(date +%s%3N)
    pred_time=$((end_time - start_time))
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [ $pred_time -lt 2000 ]; then
        echo -e "$(printf "%-50s" "Tiempo predicci√≥n (<2000ms)")${GREEN}‚úÖ PASS (${pred_time}ms)${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "$(printf "%-50s" "Tiempo predicci√≥n (<2000ms)")${YELLOW}‚ö†Ô∏è  SLOW (${pred_time}ms)${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    fi
fi

# SECCI√ìN 10: RESUMEN FINAL
show_section "üìä 10. RESUMEN FINAL"

# Calcular porcentajes
if [ $TOTAL_TESTS -gt 0 ]; then
    success_percentage=$((PASSED_TESTS * 100 / TOTAL_TESTS))
else
    success_percentage=0
fi

echo -e "${CYAN}Estad√≠sticas de las pruebas:${NC}"
echo "   üìù Total de pruebas: $TOTAL_TESTS"
echo -e "   ${GREEN}‚úÖ Pruebas exitosas: $PASSED_TESTS${NC}"
echo -e "   ${RED}‚ùå Pruebas fallidas: $FAILED_TESTS${NC}"
echo "   üìà Porcentaje de √©xito: $success_percentage%"

echo ""
echo -e "${CYAN}Estado general de la aplicaci√≥n:${NC}"

if [ $success_percentage -ge 90 ]; then
    echo -e "   ${GREEN}üéâ EXCELENTE (${success_percentage}%)${NC}"
    echo -e "   ${GREEN}‚úÖ La aplicaci√≥n est√° funcionando perfectamente${NC}"
    echo -e "   ${GREEN}üöÄ Lista para uso en producci√≥n${NC}"
elif [ $success_percentage -ge 75 ]; then
    echo -e "   ${YELLOW}‚úÖ BUENO (${success_percentage}%)${NC}"
    echo -e "   ${YELLOW}‚ö†Ô∏è  La aplicaci√≥n funciona con limitaciones menores${NC}"
    echo -e "   ${YELLOW}üîß Revisa los tests fallidos para optimizar${NC}"
elif [ $success_percentage -ge 50 ]; then
    echo -e "   ${YELLOW}‚ö†Ô∏è  REGULAR (${success_percentage}%)${NC}"
    echo -e "   ${YELLOW}üîß Varias funcionalidades necesitan atenci√≥n${NC}"
    echo -e "   ${YELLOW}üìã Revisa la instalaci√≥n y configuraci√≥n${NC}"
else
    echo -e "   ${RED}‚ùå CR√çTICO (${success_percentage}%)${NC}"
    echo -e "   ${RED}üö® Problemas significativos detectados${NC}"
    echo -e "   ${RED}üîß Ejecuta la instalaci√≥n completa nuevamente${NC}"
fi

echo ""
echo -e "${CYAN}Pr√≥ximos pasos recomendados:${NC}"

if [ $success_percentage -ge 90 ]; then
    echo "   üéØ ¬°Todo funciona perfecto! Puedes usar la aplicaci√≥n"
    echo "   üåê Ve a: http://localhost:3000"
    echo "   üìä Prueba hacer predicciones con diferentes equipos"
    echo "   üîß Considera personalizar ligas y equipos"
elif [ $success_percentage -ge 75 ]; then
    echo "   üîß Revisa los tests fallidos arriba"
    echo "   üöÄ Aseg√∫rate de que ambos servicios est√©n corriendo"
    echo "   üìä La funcionalidad b√°sica deber√≠a funcionar"
elif [ $success_percentage -ge 50 ]; then
    echo "   üìã Revisa la instalaci√≥n de dependencias"
    echo "   üîÑ Ejecuta ./instalar.bat nuevamente"
    echo "   üåê Verifica que Node.js y Python est√©n bien instalados"
else
    echo "   üîÑ Ejecuta la instalaci√≥n completa desde cero"
    echo "   üìã Verifica que Node.js y Python est√©n instalados"
    echo "   üí¨ Consulta la documentaci√≥n para soluci√≥n de problemas"
fi

echo ""
echo -e "${CYAN}Enlaces √∫tiles:${NC}"
echo "   üåê Aplicaci√≥n: http://localhost:3000"
echo "   üîå API Backend: http://localhost:3000/api/health"
if lsof -i :5000 >/dev/null 2>&1; then
    echo "   ü§ñ API Python: http://localhost:5000/api/health"
fi
echo "   üìö Documentaci√≥n: README.md"

echo ""
echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${PURPLE} üéâ SUITE DE PRUEBAS COMPLETADA - Predictor de F√∫tbol Premium  ${NC}"
echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

# Salir con c√≥digo apropiado
if [ $success_percentage -ge 75 ]; then
    exit 0
else
    exit 1
fi